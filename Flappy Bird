
function setup() { 
  createCanvas(600, 500);
  homeScreen();
}

function mainButtons() {
  let button = createButton("Home");
  button.style('background-color', 'white');
  button.style('black');
  button.position(500,0);
  button.size(100,50);
  button.mousePressed(mainMenu);
  
  let button2 = createButton("Levels");
  button2.style('background-color', 'white');
  button2.style('black');
  button2.position(410,0);
  button2.size(100,50);
  button2.mousePressed();
}

function levelButtons() {
  let button3 = createButton("Level 1 Easy");
  button3.style('background-color', 'white');
  button3.style('black');
  button3.position(380,200);
  button3.size(200,50);
  button3.mousePressed(level_1);
  
  let button4 = createButton("Level 2 Medium");
  button4.style('background-color', 'white');
  button4.style('black');
  button4.position(380,300);
  button4.size(200,50);
  button4.mousePressed(level_2);
  
  let button5 = createButton("Level 3 Hard");
  button5.style('background-color', 'white');
  button5.style('black');
  button5.position(380,400);
  button5.size(200,50);
  button5.mousePressed(level_3);
}

function homeScreen() {
  background('#35D0E4');
  //Title
  textSize(60);
  fill('white');
  strokeWeight('3');
  stroke('black');
  textFont('Times', 60);
  text("Tapping Game", 130, 115);
  mainButtons();
  levelButtons();
  
  fill('white')
  strokeWeight('2')
  stroke('black')
  textSize(25)
  text(" Directions:\n You are the yellow circle. \n Your goal is to avoid the green \n pipes. \n The speed increases with each level \n There are 3 levels to complete. \n Best of luck!!", 15, 240)
}

function mainMenu() { window.open("https://editor.p5js.org/bejacks5/full/gCYhLWBBZ")
}

function level_1() { 
  window.open("https://editor.p5js.org/bthoma70/full/-XAqSBHOP")
}

function level_2() {         window.open("https://editor.p5js.org/thomasbasil09/full/p8DkUe4d1H")
}

function level_3() { window.open("https://editor.p5js.org/thomasbasil09/full/XZMfKOfp9")
}
// Game1
const GRAVITY = 9.81;
const JUMP_HEIGHT = 9.0;
const GROUND_HEIGHT = 20; 

const WIDTH = 400;
const HEIGHT = 600;

var SCROLL_SPEED = 4;
var SCORE = 0;

function setup() {
  createCanvas(WIDTH, HEIGHT);
  mainButtons();
}


function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

class Bird {
  constructor(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.vely = 0;
  }

  draw() {
    fill("#eaff00");
    circle(this.x, this.y, this.size);
  }

  update() {
    this.y += this.vely;
    this.vely = lerp(this.vely, GRAVITY, 0.05);
    this.y = Math.max(this.size / 2, Math.min(this.y, HEIGHT - GROUND_HEIGHT - this.size / 2));
  }

  flap() {
    this.vely = -JUMP_HEIGHT;
  }

  checkDeath(pipes) {
    for (var pipe of pipes.pipes_list) {
      if (this.x + this.size / 2 > pipe.x && pipe.height && this.x - this.size / 2 < pipe.x + pipes.width) {
        if (this.y - this.size / 2 <= pipe.height || this.y + this.size / 2 >= pipe.height + pipes.gap) {
          window.location.reload();
        }
      }
      if (this.x - this.size / 2 > pipe.x + pipes.width && pipe.scored == false) {
        SCORE += 1;
        pipe.scored = true;
      }
    }
  }
}


class Pipes {
  constructor(width, frequency, gap) {
    this.width = width;
    this.frequency = frequency;
    this.gap = gap;

    this.pipes_list = [
      { x: 500, height: getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap), scored: false },
      { x: 500 + this.width + this.frequency, height: getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap), scored: false }
    ];
  }

  update() {   
    for (var pipe of this.pipes_list) {
      pipe.x -= SCROLL_SPEED;
      if (pipe.x + this.width <= 0) {
        pipe.x = WIDTH;
        pipe.height = getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap - this.gap);
        pipe.scored = false;
      }
    }
  }

  drawPipes() {
    fill("#008a39");
    for (var pipe of this.pipes_list) {
      rect(pipe.x, 0, this.width, pipe.height);
      rect(pipe.x, HEIGHT - GROUND_HEIGHT, this.width, -HEIGHT + pipe.height + GROUND_HEIGHT + this.gap);
    }
  }

}

var bird = new Bird(WIDTH / 2, HEIGHT / 2, 30);
var pipes = new Pipes(60, 150, 130);


function draw() {
  background("#87CEEB");
  fill("#7cfc00");
  rect(0, HEIGHT - GROUND_HEIGHT, WIDTH, HEIGHT);

  bird.draw();
  bird.update();
  bird.checkDeath(pipes);

  pipes.update();
  pipes.drawPipes();

  fill(255);
  textSize(60);
  textAlign(CENTER);
  text(SCORE, WIDTH / 2, HEIGHT - HEIGHT / 7);
}

function keyPressed() {
  if (keyCode == 32) {
    bird.flap();
  }
}

function mouseClicked() {
  bird.flap();
}

function mainButtons() {
  let button = createButton("Home");
  button.style('background-color', 'white');
  button.style('black');
  button.position(200,0);
  button.size(100,50);
  button.mousePressed(home);
 
  let button2 = createButton("Levels");
  button2.style('background-color', 'white');
  button2.style('black');
  button2.position(110,0);
  button2.size(100,50);
  button2.mousePressed(mainMenu);
}
function home(){window.open("https://editor.p5js.org/bejacks5/full/gCYhLWBBZ")
  }

function mainMenu(){
  window.open("https://editor.p5js.org/thomasbasil09/full/Ii8-ddtyO")
}

//Game 2
const GRAVITY = 9.81;
const JUMP_HEIGHT = 9.0;
const GROUND_HEIGHT = 20; 

const WIDTH = 400;
const HEIGHT = 600;

var SCROLL_SPEED = 4.5;
var SCORE = 0;

function setup() {
  createCanvas(WIDTH, HEIGHT);
  mainButtons();
}

function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

class Bird {
  constructor(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.vely = 0;
  }

  draw() {
    fill("#eaff00");
    circle(this.x, this.y, this.size);
  }

  update() {
    this.y += this.vely;
    this.vely = lerp(this.vely, GRAVITY, 0.05);
    this.y = Math.max(this.size / 2, Math.min(this.y, HEIGHT - GROUND_HEIGHT - this.size / 2));
  }

  flap() {
    this.vely = -JUMP_HEIGHT;
  }

  checkDeath(pipes) {
    for (var pipe of pipes.pipes_list) {
      if (this.x + this.size / 2 > pipe.x && pipe.height && this.x - this.size / 2 < pipe.x + pipes.width) {
        if (this.y - this.size / 2 <= pipe.height || this.y + this.size / 2 >= pipe.height + pipes.gap) {
          window.location.reload();
        }
      }
      if (this.x - this.size / 2 > pipe.x + pipes.width && pipe.scored == false) {
        SCORE += 1;
        pipe.scored = true;
      }
    }
  }
}


class Pipes {
  constructor(width, frequency, gap) {
    this.width = width;
    this.frequency = frequency;
    this.gap = gap;

    this.pipes_list = [
      { x: 500, height: getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap), scored: false },
      { x: 500 + this.width + this.frequency, height: getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap), scored: false }
    ];
  }

  update() {   
    for (var pipe of this.pipes_list) {
      pipe.x -= SCROLL_SPEED;
      if (pipe.x + this.width <= 0) {
        pipe.x = WIDTH;
        pipe.height = getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap - this.gap);
        pipe.scored = false;
      }
    }
  }

  drawPipes() {
    fill("#008a39");
    for (var pipe of this.pipes_list) {
      rect(pipe.x, 0, this.width, pipe.height);
      rect(pipe.x, HEIGHT - GROUND_HEIGHT, this.width, -HEIGHT + pipe.height + GROUND_HEIGHT + this.gap);
    }
  }

}

var bird = new Bird(WIDTH / 2, HEIGHT / 2, 30);
var pipes = new Pipes(60, 150, 130);


function draw() {
  background("#87CEEB");
  fill("#7cfc00");
  rect(0, HEIGHT - GROUND_HEIGHT, WIDTH, HEIGHT);

  bird.draw();
  bird.update();
  bird.checkDeath(pipes);

  pipes.update();
  pipes.drawPipes();

  fill(255);
  textSize(60);
  textAlign(CENTER);
  text(SCORE, WIDTH / 2, HEIGHT - HEIGHT / 7);
}

function keyPressed() {
  if (keyCode == 32) {
    bird.flap();
  }
}

function mouseClicked() {
  bird.flap();
}

function mainButtons() {
  let button = createButton("Home");
  button.style('background-color', 'white');
  button.style('black');
  button.position(200,0);
  button.size(100,50);
  button.mousePressed(home);
 
  let button2 = createButton("Levels");
  button2.style('background-color', 'white');
  button2.style('black');
  button2.position(110,0);
  button2.size(100,50);
  button2.mousePressed(mainMenu);
}
function home(){window.open("https://editor.p5js.org/bejacks5/full/gCYhLWBBZ")
  }

function mainMenu(){
  window.open("https://editor.p5js.org/thomasbasil09/full/Ii8-ddtyO")
}

//Game 3
const GRAVITY = 9.81;
const JUMP_HEIGHT = 9.0;
const GROUND_HEIGHT = 20; 

const WIDTH = 400;
const HEIGHT = 600;

var SCROLL_SPEED = 6;
var SCORE = 0;

function setup() {
  createCanvas(WIDTH, HEIGHT);
  mainButtons();
}

function getRndInteger(min, max) {
  // https://www.w3schools.com/js/js_random.asp
  return Math.floor(Math.random() * (max - min)) + min;
}

class Bird {
  constructor(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.vely = 0;
  }

  draw() {
    fill("#eaff00");
    circle(this.x, this.y, this.size);
  }

  update() {
    this.y += this.vely;
    this.vely = lerp(this.vely, GRAVITY, 0.05);
    this.y = Math.max(this.size / 2, Math.min(this.y, HEIGHT - GROUND_HEIGHT - this.size / 2));
  }

  flap() {
    this.vely = -JUMP_HEIGHT;
  }

  checkDeath(pipes) {
    for (var pipe of pipes.pipes_list) {
      if (this.x + this.size / 2 > pipe.x && pipe.height && this.x - this.size / 2 < pipe.x + pipes.width) {
        if (this.y - this.size / 2 <= pipe.height || this.y + this.size / 2 >= pipe.height + pipes.gap) {
          window.location.reload();
        }
      }
      if (this.x - this.size / 2 > pipe.x + pipes.width && pipe.scored == false) {
        SCORE += 1;
        pipe.scored = true;
      }
    }
  }
}


class Pipes {
  constructor(width, frequency, gap) {
    this.width = width;
    this.frequency = frequency;
    this.gap = gap;

    this.pipes_list = [
      { x: 500, height: getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap), scored: false },
      { x: 500 + this.width + this.frequency, height: getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap), scored: false }
    ];
  }

  update() {   
    for (var pipe of this.pipes_list) {
      pipe.x -= SCROLL_SPEED;
      if (pipe.x + this.width <= 0) {
        pipe.x = WIDTH;
        pipe.height = getRndInteger(this.gap, HEIGHT - GROUND_HEIGHT - this.gap - this.gap);
        pipe.scored = false;
      }
    }
  }

  drawPipes() {
    fill("#008a39");
    for (var pipe of this.pipes_list) {
      rect(pipe.x, 0, this.width, pipe.height);
      rect(pipe.x, HEIGHT - GROUND_HEIGHT, this.width, -HEIGHT + pipe.height + GROUND_HEIGHT + this.gap);
    }
  }

}

var bird = new Bird(WIDTH / 2, HEIGHT / 2, 30);
var pipes = new Pipes(60, 150, 130);


function draw() {
  background("#87CEEB");
  fill("#7cfc00");
  rect(0, HEIGHT - GROUND_HEIGHT, WIDTH, HEIGHT);

  bird.draw();
  bird.update();
  bird.checkDeath(pipes);

  pipes.update();
  pipes.drawPipes();

  fill(255);
  textSize(60);
  textAlign(CENTER);
  text(SCORE, WIDTH / 2, HEIGHT - HEIGHT / 7);
}

function keyPressed() {
  if (keyCode == 32) {
    bird.flap();
  }
}

function mouseClicked() {
  bird.flap();
}
function mainButtons() {
  let button = createButton("Home");
  button.style('background-color', 'white');
  button.style('black');
  button.position(200,0);
  button.size(100,50);
  button.mousePressed(home);
 
  let button2 = createButton("Levels");
  button2.style('background-color', 'white');
  button2.style('black');
  button2.position(110,0);
  button2.size(100,50);
  button2.mousePressed(mainMenu);
}
function home(){window.open("https://editor.p5js.org/bejacks5/full/gCYhLWBBZ")
  }

function mainMenu(){
  window.open("https://editor.p5js.org/thomasbasil09/full/Ii8-ddtyO")
}
